//
// SearchRequestDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request that should be populated to configure a search API call, made by the client on behalf of a shopper. */
public struct SearchRequestDto: Codable, JSONEncodable, Hashable {

    static let pageSizeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let skipRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Base textual search query. */
    public var query: String?
    /** Area name the search is being performed in. */
    public var area: String? = "Production"
    /** Name of collection in project configuration setting which is mapped to the google retail backend. */
    public var collection: String? = "default"
    /** Unique identifier identifying the shopper. Will be autogenerated if not provided. */
    public var visitorId: String?
    public var refinements: [SelectedRefinementDto]
    /** The number of products to be returned on each page. */
    public var pageSize: Int? = 10
    /** Where in the list of products to begin the page. */
    public var skip: Int64? = 0
    /** Name of a biasing profile which should be applied to the search. Takes priority over area default. */
    public var biasingProfile: String?
    public var biasing: BiasingProfileDto?
    public var customUrlParams: [CustomParameterDto]
    public var sorts: [SortDto]
    /** Set of navigation fields to include in the search result. Cannot be set if 'excludedNavigations' is set. */
    public var includedNavigations: [String]?
    /** Set of navigation fields to exclude in the search result. Cannot be set if 'includedNavigations' is set. */
    public var excludedNavigations: [String]?
    /** Set the specifications of dynamically generated facets. */
    public var dynamicFacet: Bool?
    /** Set the variant rollup keys. */
    public var variantRollupKeys: [String]?
    /** Set of the prefilter specifications value. */
    public var preFilter: String?
    /** Name of site filter. If not specified, the specified area's default site will be applied if configured in Command Center. To not use default specify empty value i.e.\"\".  If the site doesn't exist then the search will execute without the site filter and a warning will be provided. */
    public var site: String?
    /** List with fields which should be included in metadata object associated with each record in response. */
    public var responseMask: [String]?
    /** The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, please replace it with other character(s).Max item length = 1. */
    public var pageCategories: [String]?
    public var spellCorrectionMode: SpellCorrectionMode?
    /** When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \"Google Pixel 5\" without query expansion, you might only get \"google_pixel_5\" in the result. With query expansion, you might get \"google_pixel_4a_with_5g\", \"google_pixel_4a\" and \"google_pixel_5_case\" as well.The default value is configured in the tenant settings or true if there is no such setting */
    public var includeExpandedResults: Bool?
    /** This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true */
    public var pinUnexpandedResults: Bool?
    /** Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.   */
    public var debug: Bool?
    /** Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project.  */
    public var facetLimit: Int?
    /** Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users.  Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters.  */
    public var loginId: String?
    public var overwrites: SearchRequestDtoOverwrites?

    public init(query: String? = nil, area: String? = "Production", collection: String? = "default", visitorId: String? = nil, refinements: [SelectedRefinementDto], pageSize: Int? = 10, skip: Int64? = 0, biasingProfile: String? = nil, biasing: BiasingProfileDto?, customUrlParams: [CustomParameterDto], sorts: [SortDto], includedNavigations: [String]? = nil, excludedNavigations: [String]? = nil, dynamicFacet: Bool? = nil, variantRollupKeys: [String]? = nil, preFilter: String? = nil, site: String? = nil, responseMask: [String]? = nil, pageCategories: [String]? = nil, spellCorrectionMode: SpellCorrectionMode? = nil, includeExpandedResults: Bool? = nil, pinUnexpandedResults: Bool? = nil, debug: Bool? = nil, facetLimit: Int? = nil, loginId: String? = nil, overwrites: SearchRequestDtoOverwrites? = nil) {
        self.query = query
        self.area = area
        self.collection = collection
        self.visitorId = visitorId
        self.refinements = refinements
        self.pageSize = pageSize
        self.skip = skip
        self.biasingProfile = biasingProfile
        self.biasing = biasing
        self.customUrlParams = customUrlParams
        self.sorts = sorts
        self.includedNavigations = includedNavigations
        self.excludedNavigations = excludedNavigations
        self.dynamicFacet = dynamicFacet
        self.variantRollupKeys = variantRollupKeys
        self.preFilter = preFilter
        self.site = site
        self.responseMask = responseMask
        self.pageCategories = pageCategories
        self.spellCorrectionMode = spellCorrectionMode
        self.includeExpandedResults = includeExpandedResults
        self.pinUnexpandedResults = pinUnexpandedResults
        self.debug = debug
        self.facetLimit = facetLimit
        self.loginId = loginId
        self.overwrites = overwrites
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case query
        case area
        case collection
        case visitorId
        case refinements
        case pageSize
        case skip
        case biasingProfile
        case biasing
        case customUrlParams
        case sorts
        case includedNavigations
        case excludedNavigations
        case dynamicFacet
        case variantRollupKeys
        case preFilter
        case site
        case responseMask
        case pageCategories
        case spellCorrectionMode
        case includeExpandedResults
        case pinUnexpandedResults
        case debug
        case facetLimit
        case loginId
        case overwrites
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(query, forKey: .query)
        try container.encodeIfPresent(area, forKey: .area)
        try container.encodeIfPresent(collection, forKey: .collection)
        try container.encodeIfPresent(visitorId, forKey: .visitorId)
        try container.encode(refinements, forKey: .refinements)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(biasingProfile, forKey: .biasingProfile)
        try container.encode(biasing, forKey: .biasing)
        try container.encode(customUrlParams, forKey: .customUrlParams)
        try container.encode(sorts, forKey: .sorts)
        try container.encodeIfPresent(includedNavigations, forKey: .includedNavigations)
        try container.encodeIfPresent(excludedNavigations, forKey: .excludedNavigations)
        try container.encodeIfPresent(dynamicFacet, forKey: .dynamicFacet)
        try container.encodeIfPresent(variantRollupKeys, forKey: .variantRollupKeys)
        try container.encodeIfPresent(preFilter, forKey: .preFilter)
        try container.encodeIfPresent(site, forKey: .site)
        try container.encodeIfPresent(responseMask, forKey: .responseMask)
        try container.encodeIfPresent(pageCategories, forKey: .pageCategories)
        try container.encodeIfPresent(spellCorrectionMode, forKey: .spellCorrectionMode)
        try container.encodeIfPresent(includeExpandedResults, forKey: .includeExpandedResults)
        try container.encodeIfPresent(pinUnexpandedResults, forKey: .pinUnexpandedResults)
        try container.encodeIfPresent(debug, forKey: .debug)
        try container.encodeIfPresent(facetLimit, forKey: .facetLimit)
        try container.encodeIfPresent(loginId, forKey: .loginId)
        try container.encodeIfPresent(overwrites, forKey: .overwrites)
    }
}

