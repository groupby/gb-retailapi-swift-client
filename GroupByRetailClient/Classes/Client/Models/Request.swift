//
// Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object which is represent autocomplete request and encapsulate all passed parameters.  */
public struct Request: Codable, JSONEncodable, Hashable {

    static let areaRule = StringRule(minLength: nil, maxLength: 80, pattern: nil)
    static let collectionRule = StringRule(minLength: 1, maxLength: 80, pattern: nil)
    static let searchItemsRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 20, exclusiveMaximum: false, multipleOf: nil)
    static let queryRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    static let visitorIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    /** Area i.e. 'Production' Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated. */
    public var area: String
    /** Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration). */
    public var collection: String
    /** Completion max suggestions. The maximum allowed max suggestions is 20. */
    public var searchItems: Int
    /** String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255. */
    public var query: String
    /** Enable attribute suggestions, by setting the field enableAttributeSuggestion=true in the API request. Then in response, there will be an additional field attributeResults to show direct match results on brands/categories  Note that attribute results directly come from the products we import and Google does not apply any cleaning on them.  */
    public var enableAttributeSuggestion: Bool?
    /** Optional param which is define if extended suggestions will be returned in autocomplete response or not. Possibly values: true, false, not specified (If not specified default collection setting will be used).  */
    public var extendedSuggestions: Bool?
    /**     List with extended attributes which are would be returned in autocomplete response.     Requires extendedSuggestions to be enabled using search param or on collection layer.  */
    public var extendedAttributes: [String]?
    /** String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.  */
    public var visitorId: String?
    /** Name of site filter. If not specified, the specified area's default site will be applied if configured in Command Center. To not use default specify empty value i.e.\"\".  If the site doesn't exist then the search will execute without the site filter. */
    public var site: String?

    public init(area: String, collection: String, searchItems: Int, query: String, enableAttributeSuggestion: Bool? = nil, extendedSuggestions: Bool? = nil, extendedAttributes: [String]? = nil, visitorId: String? = nil, site: String? = nil) {
        self.area = area
        self.collection = collection
        self.searchItems = searchItems
        self.query = query
        self.enableAttributeSuggestion = enableAttributeSuggestion
        self.extendedSuggestions = extendedSuggestions
        self.extendedAttributes = extendedAttributes
        self.visitorId = visitorId
        self.site = site
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case area
        case collection
        case searchItems
        case query
        case enableAttributeSuggestion
        case extendedSuggestions
        case extendedAttributes
        case visitorId
        case site
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(area, forKey: .area)
        try container.encode(collection, forKey: .collection)
        try container.encode(searchItems, forKey: .searchItems)
        try container.encode(query, forKey: .query)
        try container.encodeIfPresent(enableAttributeSuggestion, forKey: .enableAttributeSuggestion)
        try container.encodeIfPresent(extendedSuggestions, forKey: .extendedSuggestions)
        try container.encodeIfPresent(extendedAttributes, forKey: .extendedAttributes)
        try container.encodeIfPresent(visitorId, forKey: .visitorId)
        try container.encodeIfPresent(site, forKey: .site)
    }
}

