//
// ProductDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Product representation. */
public struct ProductDto: Codable, JSONEncodable, Hashable {

    /** Relative path to product in Google Retail system. */
    public var name: String?
    /** Product id in Google Retail system. */
    public var id: String?
    /** Product type. Possible values: PRIMARY, VARIANT. If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response. */
    public var type: String?
    /** Product ID that is primary in relation to the current one */
    public var primaryProductId: String?
    /** The of the collection members when product type is COLLECTION */
    public var collectionMemberIds: [String]?
    /** Global Trade Item Number can be used by a company to uniquely identify all of its trade items.GTIN defines trade items as products or services that are priced, ordered or invoiced at any point in the supply chain. */
    public var gtin: String?
    /** Product categories (array). */
    public var categories: [String]?
    /** Product title. */
    public var title: String?
    /** Product brands. */
    public var brands: [String]?
    /** Product description. */
    public var description: String?
    /** Language of the title/description and other string attributes. Use language tags defined by [BCP 47][https://www.rfc-editor.org/rfc/bcp/bcp47.txt]. For product search this field is in use. It defaults to 'en-US' if unset. */
    public var languageCode: String?
    /** Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer.  Max entries count: 200. Length limit of 128 characters. */
    public var attributes: [String: ProductCustomAttribute]?
    /** Product tags (array). */
    public var tags: [String]?
    public var priceInfo: ProductDtoPriceInfo?
    public var rating: ProductDtoRating?
    public var availableTime: ProductDtoAvailableTime?
    /** The online availability of the product. Default to IN_STOCK */
    public var availability: String?
    /** The available quantity of the item. */
    public var availableQuantity: Int?
    /** Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. */
    public var fulfillmentInfos: [FulfillmentInfo]?
    /** Link to the appropriate product. */
    public var uri: String?
    /** Product Image. */
    public var images: [Image]?
    public var audience: ProductDtoAudience?
    public var colorInfo: ProductDtoColorInfo?
    /** Product sizes (array). */
    public var sizes: [String]?
    /** The material of the product. For example, 'leather', 'wooden'. A maximum of 20 values are allowed. Length limit of 128 characters */
    public var materials: [String]?
    /** The pattern or graphic print of the product. For example, 'striped', 'polka dot', 'paisley'. A maximum of 20 values are allowed per product. Length limit of 128 characters. */
    public var patterns: [String]?
    /** The condition of the product. Strongly encouraged to use the standardvalues: 'new', 'refurbished', 'used'. A maximum of 5 values are allowed per product. Length limit of 128 characters. */
    public var conditions: [String]?
    public var publishTime: ProductDtoPublishTime?
    public var retrievableFields: ProductDtoRetrievableFields?
    /** The promotions applied to the product. A maximum of 10 values are allowed per product. */
    public var promotions: [Promotion]?
    /** If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response. */
    public var variants: [ProductDto]?

    public init(name: String? = nil, id: String? = nil, type: String? = nil, primaryProductId: String? = nil, collectionMemberIds: [String]? = nil, gtin: String? = nil, categories: [String]? = nil, title: String? = nil, brands: [String]? = nil, description: String? = nil, languageCode: String? = nil, attributes: [String: ProductCustomAttribute]? = nil, tags: [String]? = nil, priceInfo: ProductDtoPriceInfo? = nil, rating: ProductDtoRating? = nil, availableTime: ProductDtoAvailableTime? = nil, availability: String? = nil, availableQuantity: Int? = nil, fulfillmentInfos: [FulfillmentInfo]? = nil, uri: String? = nil, images: [Image]? = nil, audience: ProductDtoAudience? = nil, colorInfo: ProductDtoColorInfo? = nil, sizes: [String]? = nil, materials: [String]? = nil, patterns: [String]? = nil, conditions: [String]? = nil, publishTime: ProductDtoPublishTime? = nil, retrievableFields: ProductDtoRetrievableFields? = nil, promotions: [Promotion]? = nil, variants: [ProductDto]? = nil) {
        self.name = name
        self.id = id
        self.type = type
        self.primaryProductId = primaryProductId
        self.collectionMemberIds = collectionMemberIds
        self.gtin = gtin
        self.categories = categories
        self.title = title
        self.brands = brands
        self.description = description
        self.languageCode = languageCode
        self.attributes = attributes
        self.tags = tags
        self.priceInfo = priceInfo
        self.rating = rating
        self.availableTime = availableTime
        self.availability = availability
        self.availableQuantity = availableQuantity
        self.fulfillmentInfos = fulfillmentInfos
        self.uri = uri
        self.images = images
        self.audience = audience
        self.colorInfo = colorInfo
        self.sizes = sizes
        self.materials = materials
        self.patterns = patterns
        self.conditions = conditions
        self.publishTime = publishTime
        self.retrievableFields = retrievableFields
        self.promotions = promotions
        self.variants = variants
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case id
        case type
        case primaryProductId
        case collectionMemberIds
        case gtin
        case categories
        case title
        case brands
        case description
        case languageCode
        case attributes
        case tags
        case priceInfo
        case rating
        case availableTime
        case availability
        case availableQuantity
        case fulfillmentInfos
        case uri
        case images
        case audience
        case colorInfo
        case sizes
        case materials
        case patterns
        case conditions
        case publishTime
        case retrievableFields
        case promotions
        case variants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(primaryProductId, forKey: .primaryProductId)
        try container.encodeIfPresent(collectionMemberIds, forKey: .collectionMemberIds)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(brands, forKey: .brands)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(priceInfo, forKey: .priceInfo)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(availableTime, forKey: .availableTime)
        try container.encodeIfPresent(availability, forKey: .availability)
        try container.encodeIfPresent(availableQuantity, forKey: .availableQuantity)
        try container.encodeIfPresent(fulfillmentInfos, forKey: .fulfillmentInfos)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(colorInfo, forKey: .colorInfo)
        try container.encodeIfPresent(sizes, forKey: .sizes)
        try container.encodeIfPresent(materials, forKey: .materials)
        try container.encodeIfPresent(patterns, forKey: .patterns)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(publishTime, forKey: .publishTime)
        try container.encodeIfPresent(retrievableFields, forKey: .retrievableFields)
        try container.encodeIfPresent(promotions, forKey: .promotions)
        try container.encodeIfPresent(variants, forKey: .variants)
    }
}

