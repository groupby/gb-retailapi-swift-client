//
// PriceInfoPriceRangeOriginalPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PriceInfoPriceRangeOriginalPrice: Codable, JSONEncodable, Hashable {

    /** Inclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum. */
    public var minimum: Double?
    /** Exclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum. */
    public var exclusiveMinimum: Double?
    /** Inclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum. */
    public var maximum: Double?
    /** Exclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum. */
    public var exclusiveMaximum: Double?

    public init(minimum: Double? = nil, exclusiveMinimum: Double? = nil, maximum: Double? = nil, exclusiveMaximum: Double? = nil) {
        self.minimum = minimum
        self.exclusiveMinimum = exclusiveMinimum
        self.maximum = maximum
        self.exclusiveMaximum = exclusiveMaximum
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case minimum
        case exclusiveMinimum
        case maximum
        case exclusiveMaximum
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(minimum, forKey: .minimum)
        try container.encodeIfPresent(exclusiveMinimum, forKey: .exclusiveMinimum)
        try container.encodeIfPresent(maximum, forKey: .maximum)
        try container.encodeIfPresent(exclusiveMaximum, forKey: .exclusiveMaximum)
    }
}

