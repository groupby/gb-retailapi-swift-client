//
// RuleConfiguration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RuleConfiguration: Codable, JSONEncodable, Hashable {

    public var ruleInExperiment: Bool?
    public var id: Int
    public var name: String
    public var areaId: Int
    public var priority: Int
    public var enabled: Bool
    public var activeHoursEnabled: Bool
    public var activeFrom: Int64
    public var activeTo: Int64
    public var triggerSets: [TriggerSet]
    public var biasingProfileName: String
    public var sort: Sort
    public var includedNavigations: [String]
    public var valueFilters: [ValueFilter]
    public var searchFilters: [SearchFilter]
    public var rangeFilters: [RangeFilter]
    public var template: RuleTemplate
    public var boostedProductBuckets: [BoostedProductBucket]?
    public var pinnedRefinements: [PinnedRefinement]
    public var messageType: MessageType
    public var type: RuleType
    public var variants: [ExperimentVariant]

    public init(ruleInExperiment: Bool? = nil, id: Int, name: String, areaId: Int, priority: Int, enabled: Bool, activeHoursEnabled: Bool, activeFrom: Int64, activeTo: Int64, triggerSets: [TriggerSet], biasingProfileName: String, sort: Sort, includedNavigations: [String], valueFilters: [ValueFilter], searchFilters: [SearchFilter], rangeFilters: [RangeFilter], template: RuleTemplate, boostedProductBuckets: [BoostedProductBucket]?, pinnedRefinements: [PinnedRefinement], messageType: MessageType, type: RuleType, variants: [ExperimentVariant]) {
        self.ruleInExperiment = ruleInExperiment
        self.id = id
        self.name = name
        self.areaId = areaId
        self.priority = priority
        self.enabled = enabled
        self.activeHoursEnabled = activeHoursEnabled
        self.activeFrom = activeFrom
        self.activeTo = activeTo
        self.triggerSets = triggerSets
        self.biasingProfileName = biasingProfileName
        self.sort = sort
        self.includedNavigations = includedNavigations
        self.valueFilters = valueFilters
        self.searchFilters = searchFilters
        self.rangeFilters = rangeFilters
        self.template = template
        self.boostedProductBuckets = boostedProductBuckets
        self.pinnedRefinements = pinnedRefinements
        self.messageType = messageType
        self.type = type
        self.variants = variants
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ruleInExperiment
        case id
        case name
        case areaId
        case priority
        case enabled
        case activeHoursEnabled
        case activeFrom
        case activeTo
        case triggerSets
        case biasingProfileName
        case sort
        case includedNavigations
        case valueFilters
        case searchFilters
        case rangeFilters
        case template
        case boostedProductBuckets
        case pinnedRefinements
        case messageType
        case type
        case variants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ruleInExperiment, forKey: .ruleInExperiment)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(areaId, forKey: .areaId)
        try container.encode(priority, forKey: .priority)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(activeHoursEnabled, forKey: .activeHoursEnabled)
        try container.encode(activeFrom, forKey: .activeFrom)
        try container.encode(activeTo, forKey: .activeTo)
        try container.encode(triggerSets, forKey: .triggerSets)
        try container.encode(biasingProfileName, forKey: .biasingProfileName)
        try container.encode(sort, forKey: .sort)
        try container.encode(includedNavigations, forKey: .includedNavigations)
        try container.encode(valueFilters, forKey: .valueFilters)
        try container.encode(searchFilters, forKey: .searchFilters)
        try container.encode(rangeFilters, forKey: .rangeFilters)
        try container.encode(template, forKey: .template)
        try container.encode(boostedProductBuckets, forKey: .boostedProductBuckets)
        try container.encode(pinnedRefinements, forKey: .pinnedRefinements)
        try container.encode(messageType, forKey: .messageType)
        try container.encode(type, forKey: .type)
        try container.encode(variants, forKey: .variants)
    }
}

