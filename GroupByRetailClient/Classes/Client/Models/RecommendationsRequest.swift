//
// RecommendationsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object to wrap all recommendation request configs. */
public struct RecommendationsRequest: Codable, JSONEncodable, Hashable {

    static let collectionRule = StringRule(minLength: 1, maxLength: 80, pattern: nil)
    static let visitorIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public var collection: String
    public var visitorId: String?
    public var limit: String?
    public var pageSize: String?
    public var eventType: String?
    public var loginId: String?
    public var productID: [String]?
    public var fields: [String]?
    public var filters: [Filter]?
    public var rawFilter: String?
    public var placement: String?
    public var name: String?
    /** The default is true. If strictFiltering true only products that are within the scope of the filter specified. If false, relax the filtering so that the response may contain other products that are outside the scope of the filtering. */
    public var strictFiltering: Bool?

    public init(collection: String, visitorId: String? = nil, limit: String? = nil, pageSize: String? = nil, eventType: String? = nil, loginId: String? = nil, productID: [String]? = nil, fields: [String]? = nil, filters: [Filter]? = nil, rawFilter: String? = nil, placement: String? = nil, name: String? = nil, strictFiltering: Bool? = nil) {
        self.collection = collection
        self.visitorId = visitorId
        self.limit = limit
        self.pageSize = pageSize
        self.eventType = eventType
        self.loginId = loginId
        self.productID = productID
        self.fields = fields
        self.filters = filters
        self.rawFilter = rawFilter
        self.placement = placement
        self.name = name
        self.strictFiltering = strictFiltering
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case collection
        case visitorId
        case limit
        case pageSize
        case eventType
        case loginId
        case productID
        case fields
        case filters
        case rawFilter
        case placement
        case name
        case strictFiltering
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(collection, forKey: .collection)
        try container.encodeIfPresent(visitorId, forKey: .visitorId)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(loginId, forKey: .loginId)
        try container.encodeIfPresent(productID, forKey: .productID)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(rawFilter, forKey: .rawFilter)
        try container.encodeIfPresent(placement, forKey: .placement)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(strictFiltering, forKey: .strictFiltering)
    }
}

