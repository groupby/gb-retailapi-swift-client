//
// TemplateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Template to assist the front end application in rendering the UI. Currently only the triggered rule name will be included, or the &#39;default&#39; template name to indicate no rule was triggered. This is to mainly compatibility with the Searchandiser API and the addition of templates in the future. Template is search agnostic and do not affect search request or result. Templated selected only by triggered rule. */
public struct TemplateDto: Codable, JSONEncodable, Hashable {

    /** Name of the template. */
    public var name: String?
    /** Name of the rule which may have triggered. */
    public var ruleName: String?
    public var triggerSet: TemplateDtoTriggerSet?
    /** Zones for linked template. */
    public var zones: [ZoneDto]?

    public init(name: String? = nil, ruleName: String? = nil, triggerSet: TemplateDtoTriggerSet? = nil, zones: [ZoneDto]? = nil) {
        self.name = name
        self.ruleName = ruleName
        self.triggerSet = triggerSet
        self.zones = zones
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case ruleName
        case triggerSet
        case zones
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ruleName, forKey: .ruleName)
        try container.encodeIfPresent(triggerSet, forKey: .triggerSet)
        try container.encodeIfPresent(zones, forKey: .zones)
    }
}

