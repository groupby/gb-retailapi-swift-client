//
// SelectedRefinementDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Refinement the shopper has selected for filtering. */
public struct SelectedRefinementDto: Codable, JSONEncodable, Hashable {

    /** The name of the navigation the refinement is for. */
    public var navigationName: String
    public var type: NavigationTypeDto
    /** Value of selected refinement, if type is value. */
    public var value: String?
    /** The lowest end or value of the range, if applicable. */
    public var low: Double?
    /** The highest end or value of the range, if applicable. */
    public var high: Double?
    /** Field which is indicated that it is dynamic navigation. */
    public var source: String?
    /** Navigation multiselect. Indicate that it is possibly to select more than one navigation value due to search request. */
    public var or: Bool?

    public init(navigationName: String, type: NavigationTypeDto, value: String? = nil, low: Double? = nil, high: Double? = nil, source: String? = nil, or: Bool? = nil) {
        self.navigationName = navigationName
        self.type = type
        self.value = value
        self.low = low
        self.high = high
        self.source = source
        self.or = or
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case navigationName
        case type
        case value
        case low
        case high
        case source
        case or
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(navigationName, forKey: .navigationName)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(low, forKey: .low)
        try container.encodeIfPresent(high, forKey: .high)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(or, forKey: .or)
    }
}

