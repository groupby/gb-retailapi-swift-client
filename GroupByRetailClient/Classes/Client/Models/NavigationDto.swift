//
// NavigationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Navigation available for the shopper to refine the results on. */
public struct NavigationDto: Codable, JSONEncodable, Hashable {

    /** Name of the field the navigation in on. */
    public var name: String?
    /** Name of the navigation for display purposes. */
    public var displayName: String?
    public var type: NavigationTypeDto
    public var refinements: [RefinementDto]
    /** Flag if this navigation supports or queries. */
    public var or: Bool?
    public var source: String
    public var metadata: [Metadata]
    /** Place id for inventory navigations. */
    public var placeId: String

    public init(name: String? = nil, displayName: String? = nil, type: NavigationTypeDto, refinements: [RefinementDto], or: Bool? = nil, source: String, metadata: [Metadata], placeId: String) {
        self.name = name
        self.displayName = displayName
        self.type = type
        self.refinements = refinements
        self.or = or
        self.source = source
        self.metadata = metadata
        self.placeId = placeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case displayName
        case type
        case refinements
        case or
        case source
        case metadata
        case placeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encode(type, forKey: .type)
        try container.encode(refinements, forKey: .refinements)
        try container.encodeIfPresent(or, forKey: .or)
        try container.encode(source, forKey: .source)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(placeId, forKey: .placeId)
    }
}

