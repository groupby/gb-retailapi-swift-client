//
// PriceInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Price info representation. */
public struct PriceInfo: Codable, JSONEncodable, Hashable {

    /** Currency code. */
    public var currencyCode: String?
    /** Price value. */
    public var price: Float?
    /** Original price value. */
    public var originalPrice: Float?
    /** Cost */
    public var cost: Float?
    public var priceEffectiveTime: PriceInfoPriceEffectiveTime?
    public var priceExpireTime: PriceInfoPriceExpireTime?
    public var priceRange: PriceInfoPriceRange?

    public init(currencyCode: String? = nil, price: Float? = nil, originalPrice: Float? = nil, cost: Float? = nil, priceEffectiveTime: PriceInfoPriceEffectiveTime? = nil, priceExpireTime: PriceInfoPriceExpireTime? = nil, priceRange: PriceInfoPriceRange? = nil) {
        self.currencyCode = currencyCode
        self.price = price
        self.originalPrice = originalPrice
        self.cost = cost
        self.priceEffectiveTime = priceEffectiveTime
        self.priceExpireTime = priceExpireTime
        self.priceRange = priceRange
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currencyCode
        case price
        case originalPrice
        case cost
        case priceEffectiveTime
        case priceExpireTime
        case priceRange
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(originalPrice, forKey: .originalPrice)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(priceEffectiveTime, forKey: .priceEffectiveTime)
        try container.encodeIfPresent(priceExpireTime, forKey: .priceExpireTime)
        try container.encodeIfPresent(priceRange, forKey: .priceRange)
    }
}

