//
// AutocompleteAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AutocompleteAPI {

    /**

     - parameter xGroupbyCustomerId: (header) Header on incoming HTTP requests that is populated by the API gateway and indicates the customer ID. 
     - parameter identity: (query)  
     - parameter merchandiser: (query)  
     - parameter request: (query) Object which is represent autocomplete request and encapsulate all passed parameters.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func autocompletesearch(xGroupbyCustomerId: String, identity: Identity, merchandiser: Merchandiser, request: Request? = nil, apiResponseQueue: DispatchQueue = GroupByRetailClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchResults?, _ error: Error?) -> Void)) -> RequestTask {
        return autocompletesearchWithRequestBuilder(xGroupbyCustomerId: xGroupbyCustomerId, identity: identity, merchandiser: merchandiser, request: request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/request
     - A simple request used to get completes the specified prefix with keyword suggestions.
     - BASIC:
       - type: http
       - name: GroupByIncEmployee
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: ClientKey
     - responseHeaders: [Content-Type(String), Date(String), Content-Length(String), Connection(String), Content-Encoding(String)]
     - parameter xGroupbyCustomerId: (header) Header on incoming HTTP requests that is populated by the API gateway and indicates the customer ID. 
     - parameter identity: (query)  
     - parameter merchandiser: (query)  
     - parameter request: (query) Object which is represent autocomplete request and encapsulate all passed parameters.  (optional)
     - returns: RequestBuilder<SearchResults> 
     */
    open class func autocompletesearchWithRequestBuilder(xGroupbyCustomerId: String, identity: Identity, merchandiser: Merchandiser, request: Request? = nil) -> RequestBuilder<SearchResults> {
        let localVariablePath = "/api/request"
        let localVariableURLString = GroupByRetailClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "request": (wrappedValue: request?.encodeToJSON(), isExplode: true),
            "identity": (wrappedValue: identity.encodeToJSON(), isExplode: true),
            "merchandiser": (wrappedValue: merchandiser.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Groupby-Customer-Id": xGroupbyCustomerId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchResults>.Type = GroupByRetailClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
